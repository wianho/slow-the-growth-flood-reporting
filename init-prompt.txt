# Volusia Flood Watch - Project Initialization

Copy this entire prompt and run it with Claude Code CLI to scaffold the project:

---

Please create a complete project structure for "Volusia Flood Watch", an open-source flood reporting system for Volusia County, Florida.

## Project Overview
A Progressive Web App (PWA) that allows Volusia County residents to anonymously report flooding with location verification, rate limiting, and confidence scoring. Weekly data rotation (every Wednesday at 5am EST). Integration with NOAA, USGS, Volusia County GIS, and NWS weather data.

## Technical Stack

**Frontend (PWA):**
- React 18 + TypeScript + Vite
- Leaflet.js for maps with OpenStreetMap
- Tailwind CSS for styling
- React Query for data fetching
- Zustand for state management
- Workbox for PWA service worker

**Backend:**
- Node.js 20+ with Express + TypeScript
- PostgreSQL 15+ with PostGIS extension
- Redis for rate limiting
- JWT for device verification
- node-cron for weekly data rotation

**Development:**
- Docker Compose for local PostgreSQL + PostGIS + Redis
- ESLint + Prettier
- Jest for testing

## Project Structure

Create this monorepo structure:

```
volusia-flood-watch/
├── frontend/
│   ├── public/
│   │   ├── manifest.json
│   │   ├── robots.txt
│   │   └── icons/ (PWA icons 192x192, 512x512)
│   ├── src/
│   │   ├── components/
│   │   │   ├── Map/
│   │   │   │   ├── FloodMap.tsx
│   │   │   │   ├── ReportMarker.tsx
│   │   │   │   └── MapControls.tsx
│   │   │   ├── Report/
│   │   │   │   ├── ReportForm.tsx
│   │   │   │   └── ReportList.tsx
│   │   │   ├── Dashboard/
│   │   │   │   ├── AlertBanner.tsx
│   │   │   │   ├── StatsPanel.tsx
│   │   │   │   └── WeatherWidget.tsx
│   │   │   └── Layout/
│   │   │       ├── Header.tsx
│   │   │       └── Footer.tsx
│   │   ├── hooks/
│   │   │   ├── useGeolocation.ts
│   │   │   ├── useFloodReports.ts
│   │   │   └── useRateLimit.ts
│   │   ├── services/
│   │   │   ├── api.ts
│   │   │   ├── location.ts
│   │   │   └── deviceFingerprint.ts
│   │   ├── store/
│   │   │   └── appStore.ts
│   │   ├── types/
│   │   │   └── index.ts
│   │   ├── utils/
│   │   │   ├── validation.ts
│   │   │   └── constants.ts
│   │   ├── App.tsx
│   │   ├── main.tsx
│   │   ├── service-worker.ts
│   │   └── index.css
│   ├── index.html
│   ├── vite.config.ts
│   ├── tsconfig.json
│   ├── tailwind.config.js
│   ├── postcss.config.js
│   └── package.json
├── backend/
│   ├── src/
│   │   ├── routes/
│   │   │   ├── reports.ts
│   │   │   ├── data.ts
│   │   │   └── verification.ts
│   │   ├── services/
│   │   │   ├── database.ts
│   │   │   ├── redis.ts
│   │   │   ├── rateLimit.ts
│   │   │   ├── noaa.ts
│   │   │   ├── usgs.ts
│   │   │   ├── weather.ts
│   │   │   └── gis.ts
│   │   ├── middleware/
│   │   │   ├── auth.ts
│   │   │   ├── rateLimit.ts
│   │   │   └── validation.ts
│   │   ├── jobs/
│   │   │   └── weeklyRotation.ts
│   │   ├── models/
│   │   │   └── FloodReport.ts
│   │   ├── types/
│   │   │   └── index.ts
│   │   ├── utils/
│   │   │   ├── geo.ts
│   │   │   └── logger.ts
│   │   └── index.ts
│   ├── migrations/
│   │   ├── 001_initial_schema.sql
│   │   └── 002_indexes.sql
│   ├── tsconfig.json
│   └── package.json
├── docker-compose.yml
├── .env.example
├── .gitignore
├── README.md
├── CONTRIBUTING.md
└── LICENSE (MIT)
```

## Key Implementation Requirements

### 1. Database Schema (migrations/001_initial_schema.sql)
```sql
CREATE EXTENSION IF NOT EXISTS postgis;

CREATE TABLE flood_reports (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  location GEOGRAPHY(POINT, 4326) NOT NULL,
  road_name VARCHAR(255),
  severity VARCHAR(20) CHECK (severity IN ('minor', 'moderate', 'severe')),
  device_fingerprint VARCHAR(255) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  expires_at TIMESTAMPTZ NOT NULL,
  confidence_score INTEGER DEFAULT 1,
  CONSTRAINT valid_location CHECK (ST_Within(
    location::geometry,
    ST_MakeEnvelope(-81.5, 28.7, -80.7, 29.3, 4326)
  ))
);

CREATE TABLE flood_reports_archive (
  id UUID PRIMARY KEY,
  location GEOGRAPHY(POINT, 4326) NOT NULL,
  road_name VARCHAR(255),
  severity VARCHAR(20),
  device_fingerprint VARCHAR(255) NOT NULL,
  created_at TIMESTAMPTZ,
  archived_at TIMESTAMPTZ DEFAULT NOW(),
  confidence_score INTEGER
);

CREATE TABLE audit_log (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  report_id UUID,
  action VARCHAR(50) NOT NULL,
  metadata JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX idx_reports_location ON flood_reports USING GIST(location);
CREATE INDEX idx_reports_created ON flood_reports(created_at DESC);
CREATE INDEX idx_reports_expires ON flood_reports(expires_at);
```

### 2. Docker Compose Setup
```yaml
version: '3.8'
services:
  postgres:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_DB: volusia_flood
      POSTGRES_USER: floodwatch
      POSTGRES_PASSWORD: dev_password_change_in_prod
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
  
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
```

### 3. Core API Endpoints

**POST /api/reports** - Submit flood report
- Validate location is in Volusia County (bounding box or polygon)
- Check rate limit (3 per device per day via Redis)
- Check for nearby reports (within 100m, last 2 hours) to increment confidence_score
- Set expires_at to next Wednesday 5am EST
- Return report with confidence score

**GET /api/reports** - Get active reports
- Query params: bbox (bounding box), minConfidence
- Return GeoJSON FeatureCollection
- Include confidence_score in properties

**GET /api/data/noaa** - Active flood alerts
- Fetch from weather.gov API for Volusia County zones
- Cache for 5 minutes

**GET /api/data/usgs** - Stream gauge data
- Fetch real-time data for Volusia County gauges
- Return with flood stage thresholds
- Cache for 15 minutes

**POST /api/verify-location** - Verify device location
- Accept lat/lng from device GPS
- Validate within Florida bounds
- Return JWT token (24hr expiry) if valid
- Required for submitting reports

### 4. Location Verification (Volusia County Bounds)
```typescript
// Volusia County approximate bounding box
const VOLUSIA_BOUNDS = {
  north: 29.3,
  south: 28.7,
  east: -80.7,
  west: -81.5
};

// More precise: Use Volusia County GIS boundary polygon if available
```

### 5. Rate Limiting Logic
```typescript
// Redis key: `ratelimit:${deviceFingerprint}:${YYYY-MM-DD}`
// Store count, expire at midnight
// Check count < 3 before allowing report
```

### 6. Device Fingerprinting (Frontend)
Use browser fingerprinting library (e.g., @fingerprintjs/fingerprintjs) to generate stable device ID without storing personal info.

### 7. Weekly Rotation Job (Cron)
```typescript
// Run every Wednesday at 5am EST
// Move all flood_reports to flood_reports_archive
// Log to audit_log
// Clean up expired reports
```

### 8. PWA Configuration
- manifest.json with app name, icons, theme
- Service worker with offline support
- Cache map tiles and API responses
- Install prompt for home screen

### 9. Map Implementation
- Leaflet.js with OpenStreetMap tiles
- Custom markers for flood reports (color by confidence/severity)
- Cluster markers when zoomed out
- Toggle layers: reports, flood zones, USGS gauges, NWS alerts

### 10. Environment Variables (.env.example)
```
# Database
DATABASE_URL=postgresql://floodwatch:dev_password@localhost:5432/volusia_flood

# Redis
REDIS_URL=redis://localhost:6379

# API
PORT=3001
NODE_ENV=development
JWT_SECRET=change_this_in_production

# External APIs
NOAA_API_BASE=https://api.weather.gov
USGS_API_BASE=https://waterservices.usgs.gov
VOLUSIA_GIS_URL=https://maps.vcgov.org/arcgis/rest/services

# App Config
ROTATION_DAY=3  # Wednesday
ROTATION_HOUR=5 # 5am
ROTATION_TZ=America/New_York
REPORTS_PER_DEVICE_PER_DAY=3
```

## Additional Files Needed

### README.md
Include:
- Project description and mission
- Features list
- Tech stack
- Local development setup instructions
- Docker setup
- API documentation
- Contributing guidelines
- License info
- Contact info

### CONTRIBUTING.md
- Code of conduct
- How to set up dev environment
- Pull request process
- Coding standards
- Testing requirements

### package.json scripts
```json
{
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "jest",
    "lint": "eslint src --ext ts,tsx"
  }
}
```

## Installation & Setup Steps in README

1. Clone repository
2. Copy .env.example to .env
3. Run `docker-compose up -d` (starts PostgreSQL + Redis)
4. Install dependencies: `npm install` in both frontend/ and backend/
5. Run migrations (auto-run via Docker Compose init)
6. Start backend: `cd backend && npm run dev`
7. Start frontend: `cd frontend && npm run dev`
8. Access at http://localhost:5173

## Testing Requirements

- Unit tests for rate limiting logic
- Integration tests for API endpoints
- E2E tests for report submission flow
- Geospatial query tests

## Next Steps After Setup

- Obtain Volusia County GIS data (flood zones, roads)
- Configure USGS gauge station IDs for Volusia County
- Set up NWS alert zones for Volusia County
- Design PWA icons and branding
- Deploy to AWS (separate deployment guide)

---

Please create all files with appropriate content, install all dependencies, and ensure the project is ready to run locally with `docker-compose up` and `npm run dev`.
