version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.4
    environment:
      POSTGRES_DB: slow_growth_flood
      POSTGRES_USER: slowgrowth
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U slowgrowth"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: slow_growth_flood
      DB_USER: slowgrowth
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: redis://redis:6379
      PORT: 3001
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET}
      NOAA_API_BASE: https://api.weather.gov
      USGS_API_BASE: https://waterservices.usgs.gov
      VOLUSIA_GIS_URL: https://maps.vcgov.org/arcgis/rest/services
      ROTATION_DAY: 3
      ROTATION_HOUR: 5
      ROTATION_TZ: America/New_York
      REPORTS_PER_DEVICE_PER_DAY: 3
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD_HASH: ${ADMIN_PASSWORD_HASH}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      args:
        VITE_API_URL: https://stgfloods386.from-fl.com/api
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
